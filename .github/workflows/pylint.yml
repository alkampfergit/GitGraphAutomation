name: pylint

on:
  push:
    branches:
      - main
      - develop
      - release/*
      - feature/*
      - hotfix/*
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  gitversion: 
    runs-on: windows-latest
    
    steps:
    
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1000
                
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.x' # SDK Version to use; x will use the latest version of the 3.1 channel
        
    - name: GitVersion
      id: gitversion
      shell: pwsh
      run: |
        git fetch
        git branch -a
        Install-package BuildUtils -Confirm:$false -Scope CurrentUser -Force
        Import-Module BuildUtils
        
        $DebugPreference = 'Continue'
        $gitVersion = Invoke-Gitversion -ConfigurationFile ".config/GitVersion.yml"

        Write-Host "::group::GitVersion"
        Write-Host "AssemblyVersion=$($gitVersion.assemblyVersion)"
        Write-Host "FullSemversion=$($gitVersion.assemblyInformationalVersion)"
        Write-Host "::endgroup::"

        Write-Host "::set-output name=GITVERSION_ASSEMBLYSEMVER::$($gitVersion.assemblyVersion)"
        Write-Host "::set-output name=GITVERSION_ASSEMBLYSEMFILEVER::$($gitVersion.assemblyFileVersion)"
        Write-Host "::set-output name=GITVERSION_FULLSEMVER::$($gitVersion.assemblyInformationalVersion)"
        Write-Host "::set-output name=GITVERSION_NUGETVERSION::$($gitVersion.nugetVersion)"
        
    outputs:
      fileVersion : ${{ steps.gitversion.outputs.GITVERSION_ASSEMBLYSEMFILEVER }}
      
  build:

    runs-on: ubuntu-latest
    needs: [gitversion]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100

    - run: echo "Using previous variable fileVersion = ${{ needs.gitversion.outputs.fileVersion }}"
    
    - run: git fetch
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint pytest pytest-cov selenium playwright

    - name: Running pytest
      run: |
        pytest -v  --cov --cov-report=xml --cov-report=html --junitxml=xunit-result.xml

    - uses: actions/upload-artifact@v2
      with:
        name: code-coverage
        path: htmlcov

    - name: Analysing the code with pylint
      continue-on-error: true
      run: |
        pylint src/git_graph_automation

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectVersion=${{ needs.gitversion.outputs.fileVersion }}
